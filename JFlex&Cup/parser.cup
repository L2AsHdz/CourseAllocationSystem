package courseallocationsystem.analizadores;

import courseallocationsystem.edd.list.CircularList;
import courseallocationsystem.edd.list.List;
import courseallocationsystem.edd.table.HashTable;
import courseallocationsystem.edd.tree.ArbolAVL;
import courseallocationsystem.edd.tree.BTree;
import courseallocationsystem.model.Asignacion;
import courseallocationsystem.model.Catedratico;
import courseallocationsystem.model.Curso;
import courseallocationsystem.model.Edificio;
import courseallocationsystem.model.Estudiante;
import courseallocationsystem.model.Horario;
import courseallocationsystem.model.Salon;
import courseallocationsystem.model.Usuario;
import java.util.ArrayList;
import java_cup.runtime.Symbol;

parser code {:

    private ArrayList<String> errores = new ArrayList();

    private CircularList<Usuario, Integer> usuarios = new CircularList();
    private CircularList<Edificio, String> edificios = new CircularList();
    private List<Salon, String> salones = new List();
    private CircularList<Curso, Integer> cursos = new CircularList();
    private HashTable<Estudiante, Integer> estudiantes = new HashTable(37, 0.55f);
    private ArbolAVL<Catedratico, Integer> catedraticos = new ArbolAVL();
    private BTree<Horario, Integer> horarios = new BTree();
    private CircularList<Asignacion, String> asignaciones = new CircularList();

    public ArrayList<String> getErrores(){
        return this.errores;
    }

    public CircularList<Usuario, Integer> getUsuarios() {
        return this.usuarios;
    }

    public List<Salon, String> getSalones() {
        return this.salones;
    }

    public CircularList<Edificio, String> getEdificios() {
        return this.edificios;
    }

    public CircularList<Curso, Integer> getCursos() {
        return this.cursos;
    }

    public HashTable<Estudiante, Integer> getEstudiantes() {
        return this.estudiantes;
    }

    public ArbolAVL<Catedratico, Integer> getCatedraticos() {
        return this.catedraticos;
    }

    public BTree<Horario, Integer> getHorarios() {
        return this.horarios;
    }

    public CircularList<Asignacion, String> getAsignaciones() {
        return this.asignaciones;
    }

    public void syntax_error(Symbol s) {
        String ss =  (String) s.value;
        StringBuilder descripcion = new StringBuilder("Se esperaba: ");
        expected_token_ids().forEach(x -> descripcion.append(symbl_name_from_id(x)).append(", "));
        errores.add("Error en :" + ss + ", " + descripcion);
    }

    public void unrecovered_syntax_error(Symbol cur_token){
        String t = (String) cur_token.value;
        System.out.println("Error irrecuperable " + t);
    }

:}

terminal                USUARIO, ESTUDIANTE, EDIFICIO, SALON, CATEDRATICO, CURSO, HORARIO, ASIGNAR;
terminal String         USR_COLABORADOR, USR_ESTUDIANTE;
terminal                OPEN_ROUND_BRACKET, CLOSE_ROUND_BRACKET, COMMA, SEMI, QUOTE_MARK;
terminal String         LITERAL, ENTERO, NAME_ED;

non terminal            inicio, entidad, startEntidad, paramsUser, paramsEstudiante, paramsEdificio, paramsSalon;
non terminal            paramsCatedratico, paramsCurso, paramsHorario, paramsAsignar;
non terminal String     typeUser;

inicio
    ::= inicio entidad
    |   entidad
;

entidad
    ::= startEntidad CLOSE_ROUND_BRACKET SEMI
;

startEntidad
    ::= USUARIO OPEN_ROUND_BRACKET paramsUser
    |   ESTUDIANTE OPEN_ROUND_BRACKET paramsEstudiante
    |   EDIFICIO OPEN_ROUND_BRACKET paramsEdificio
    |   SALON OPEN_ROUND_BRACKET paramsSalon
    |   CATEDRATICO OPEN_ROUND_BRACKET paramsCatedratico
    |   CURSO OPEN_ROUND_BRACKET paramsCurso
    |   HORARIO OPEN_ROUND_BRACKET paramsHorario
    |   ASIGNAR OPEN_ROUND_BRACKET paramsAsignar
;

paramsUser
    ::= ENTERO:id COMMA QUOTE_MARK LITERAL:name QUOTE_MARK COMMA QUOTE_MARK LITERAL:pass QUOTE_MARK COMMA typeUser:t {:
            Integer idI = Integer.parseInt(id);
            if (t.equals("estudiante")) {
                if (estudiantes.get(idI) == null) {
                    errores.add("Estudiante " + id + " no existe. " + idleft + ":" + idright);
                } else {
                    if (usuarios.get(idI) != null) {
                        errores.add("Usuario " + id + " ya existe. " + idleft + ":" + idright);
                    } else {
                        usuarios.add(new Usuario(name, pass, t, idI));
                    }
                }
            } else {
                usuarios.add(new Usuario(name, pass, t, idI));
            }
        :}
;

typeUser
    ::= USR_COLABORADOR:t       {:RESULT = t;:}
    |   USR_ESTUDIANTE:t        {:RESULT = t;:}
;
paramsEstudiante
    ::= ENTERO:id COMMA QUOTE_MARK LITERAL:name QUOTE_MARK COMMA QUOTE_MARK LITERAL:dir QUOTE_MARK {:
            if (estudiantes.get(Integer.parseInt(id)) != null) {
                errores.add("Estudiante " + id + " ya existe. " + idleft + ":" + idright);
            } else {
                estudiantes.add(new Estudiante(name, dir, Integer.parseInt(id)));
            }
        :}
;

paramsEdificio
    ::= QUOTE_MARK LITERAL:name QUOTE_MARK {:
            if (edificios.get(name) != null) {
                errores.add("Edificio " + name + " ya existe. " + nameleft + ":" + nameright);
            } else {
                edificios.add(new Edificio(name));
            }
        :}
;

paramsSalon
    ::= QUOTE_MARK LITERAL:s QUOTE_MARK COMMA ENTERO:id COMMA ENTERO:c {:
            if (salones.get(id + "-" + s) != null) {
                errores.add("Salon ya existe.");
            } else {
                if (edificios.get(s) == null) {
                    errores.add("Edificio " + s + " no existe");
                } else {
                    salones.add(new Salon(Integer.parseInt(c), s, id + "-" + s));
                }
            }
        :}
;

paramsCatedratico
    ::= ENTERO:i COMMA QUOTE_MARK LITERAL:name QUOTE_MARK COMMA QUOTE_MARK LITERAL:dir QUOTE_MARK {:
            Integer id = Integer.parseInt(i);
            if (catedraticos.get(id) != null) {
                errores.add("Catedratico ya existe");
            } else {
                catedraticos.add(new Catedratico(name, dir, id  ));
            }
        :}
;

paramsCurso
    ::= ENTERO:i COMMA QUOTE_MARK LITERAL:name QUOTE_MARK COMMA ENTERO:s COMMA ENTERO:n {:
            Integer id = Integer.parseInt(i);
            if (cursos.get(id) != null) {
                errores.add("Curso " + id + "ya esta agregado");
            } else {
                cursos.add(new Curso(name, Integer.parseInt(s), Integer.parseInt(n), id));
            }
        :}
;

paramsHorario
    ::= ENTERO:i COMMA QUOTE_MARK LITERAL:p QUOTE_MARK COMMA QUOTE_MARK LITERAL:d QUOTE_MARK COMMA ENTERO:iCur COMMA ENTERO:idSalon COMMA NAME_ED:iEd COMMA ENTERO:iCated {:
            Integer id = Integer.parseInt(i);
            Integer idCurso = Integer.parseInt(iCur);
            Integer idCatedra = Integer.parseInt(iCated);

            if (horarios.get(id) != null) {
                errores.add("Horario " + id + " ya existe");
            } else {
                if (cursos.get(idCurso) == null) {
                    errores.add("Curso " + idCurso + " no existe");
                } else if (salones.get(idSalon + "-" + iEd) == null) {
                    errores.add("Salon " + idSalon + " no existe");
                } else if (edificios.get(iEd) == null) {
                    errores.add("Edifio " + iEd + " no existe");
                } else if (catedraticos.get(idCatedra) == null) {
                    errores.add("Catedratico " + idCatedra + " no existe");
                } else {
                    horarios.add(new Horario(p, d, idCurso, idSalon + "-" + iEd, iEd, idCatedra, id));
                }
            }
        :}
;

paramsAsignar
    ::= ENTERO:iEst COMMA ENTERO:iHo COMMA ENTERO:z COMMA ENTERO:f {:
            if (horarios.get(Integer.parseInt(iHo)) == null) {
                errores.add("Horario " + iHo + " no existe");
            } else {
                if (asignaciones.get(iEst + "-" + iHo) != null) {
                    errores.add("Asignacion " + iEst + " ya existe" );
                } else {
                    asignaciones.add(new Asignacion(iEst + "-" + iHo, Integer.parseInt(iHo), Integer.parseInt(z), Integer.parseInt(f)));
                }
            }
        :}
;